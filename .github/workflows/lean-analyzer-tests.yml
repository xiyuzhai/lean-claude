name: Lean Analyzer Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'crates/apps/lean-analyzer/**'
      - 'crates/syntax/**'
      - 'crates/semantics/**'
      - '.github/workflows/lean-analyzer-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'crates/apps/lean-analyzer/**'
      - 'crates/syntax/**'
      - 'crates/semantics/**'
      - '.github/workflows/lean-analyzer-tests.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-analyzer:
    name: Test Lean Analyzer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        include:
          - os: ubuntu-latest
            rust: stable
            coverage: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --package lean-analyzer --all-targets -- -D warnings
    
    - name: Build lean-analyzer
      run: cargo build --package lean-analyzer --verbose
    
    - name: Run unit tests
      run: cargo test --package lean-analyzer --lib --verbose
    
    - name: Run integration tests
      run: cargo test --package lean-analyzer --test "*" --verbose
    
    - name: Run doc tests
      run: cargo test --package lean-analyzer --doc --verbose

  test-error-messages:
    name: Test Error Message Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-error-tests-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test error message improvements
      run: |
        cd crates/apps/lean-analyzer
        cargo test error_messages --verbose -- --test-threads=1
    
    - name: Test import suggestions
      run: |
        cd crates/apps/lean-analyzer
        cargo test import_namespace --verbose -- --test-threads=1
    
    - name: Test beginner-friendly messages
      run: |
        cd crates/apps/lean-analyzer
        cargo test beginner --verbose -- --test-threads=1

  test-lsp-integration:
    name: Test LSP Integration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-lsp-tests-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test LSP functionality
      run: |
        cd crates/apps/lean-analyzer
        cargo test lsp_integration --verbose
    
    - name: Test hover and completion
      run: |
        cd crates/apps/lean-analyzer
        cargo test hover_tests completion_tests --verbose
    
    - name: Test navigation features
      run: |
        cd crates/apps/lean-analyzer
        cargo test navigation_tests --verbose

  test-code-actions:
    name: Test Code Actions and Quick Fixes
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-actions-tests-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test import quick fixes
      run: |
        cd crates/apps/lean-analyzer
        cargo test test_import_quick_fix_integration --verbose
    
    - name: Test syntax quick fixes
      run: |
        cd crates/apps/lean-analyzer
        cargo test syntax_fix --verbose
    
    - name: Test refactoring suggestions
      run: |
        cd crates/apps/lean-analyzer
        cargo test refactoring --verbose

  test-formatting:
    name: Test Formatting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-format-tests-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test basic formatting
      run: |
        cd crates/apps/lean-analyzer
        cargo test formatting_tests --verbose
    
    - name: Test complex formatting scenarios
      run: |
        cd crates/apps/lean-analyzer
        cargo test test_match_expression_formatting --verbose
        cargo test test_long_line_wrapping --verbose

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-perf-tests-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install criterion dependencies
      run: sudo apt-get update && sudo apt-get install -y gnuplot
    
    - name: Run performance benchmarks
      env:
        RUN_PERF_TESTS: "1"
      run: |
        cd crates/apps/lean-analyzer
        cargo bench --bench analyzer_benchmarks
    
    - name: Test large file performance
      run: |
        cd crates/apps/lean-analyzer
        cargo test performance_tests --verbose --release
    
    - name: Test response time requirements
      run: |
        cd crates/apps/lean-analyzer
        cargo test test_.*_100ms --verbose --release

  real-world-tests:
    name: Real-World Scenario Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'real-world')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-real-world-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test beginner workflow
      env:
        RUN_REAL_WORLD_TESTS: "1"
      run: |
        cd crates/apps/lean-analyzer
        cargo test test_typical_beginner_workflow --verbose
    
    - name: Test import resolution workflow
      run: |
        cd crates/apps/lean-analyzer
        cargo test test_import_resolution_workflow --verbose
    
    - name: Test complete workflows
      run: |
        cd crates/apps/lean-analyzer
        cargo test real_world_scenarios --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ubuntu-coverage-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Generate coverage report
      run: |
        cd crates/apps/lean-analyzer
        cargo llvm-cov --package lean-analyzer --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./crates/apps/lean-analyzer/lcov.info
        directory: ./crates/apps/lean-analyzer/
        flags: lean-analyzer
        name: lean-analyzer-coverage
        fail_ci_if_error: false

  test-matrix:
    name: Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-matrix-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test cross-platform compatibility
      run: |
        cd crates/apps/lean-analyzer
        cargo test --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-analyzer, test-error-messages, test-lsp-integration, test-code-actions, test-formatting]
    if: always()
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Core Tests | ${{ needs.test-analyzer.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Error Messages | ${{ needs.test-error-messages.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| LSP Integration | ${{ needs.test-lsp-integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Actions | ${{ needs.test-code-actions.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Formatting | ${{ needs.test-formatting.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test-analyzer.result }}" != "success" ] || \
           [ "${{ needs.test-error-messages.result }}" != "success" ] || \
           [ "${{ needs.test-lsp-integration.result }}" != "success" ] || \
           [ "${{ needs.test-code-actions.result }}" != "success" ] || \
           [ "${{ needs.test-formatting.result }}" != "success" ]; then
          echo "❌ Some tests failed!" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
        fi